var searchIndex = {};
searchIndex["rgb"] = {"doc":"Basic struct for `RGB` and `RGBA` pixels. Packed, with red first, alpha last.","items":[[3,"RGB","rgb","",null,null],[12,"r","","",0,null],[12,"g","","",0,null],[12,"b","","",0,null],[3,"RGBA","","",null,null],[12,"r","","",1,null],[12,"g","","",1,null],[12,"b","","",1,null],[12,"a","","",1,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new","","Convenience function for creating a new pixel",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"iter","","Iterate over color components (R, G, and B)",0,null],[11,"map","","",0,null],[11,"as_slice","","",0,null],[11,"as_mut_slice","","",0,null],[11,"from_iter","","Takes exactly 3 elements from the iterator and creates a new instance.\nPanics if there are fewer elements in the iterator.",0,{"inputs":[{"name":"i"}],"output":{"name":"rgb"}}],[11,"fmt","","",0,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"new","","",1,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"iter","","",1,null],[11,"rgb","","Copy RGB components of of the RGBA struct",1,null],[11,"rgb_mut","","Provide a mutable view of only RGB components (leaving out alpha). Useful to change color without changing opacity.",1,null],[11,"map","","",1,null],[11,"as_slice","","",1,null],[11,"as_mut_slice","","",1,null],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"rgba"}}],[11,"fmt","","",1,null],[11,"add","","",0,null],[11,"add","","",1,null],[11,"sub","","",0,null],[11,"sub","","",1,null],[11,"add","","",0,null],[11,"add","","",1,null],[11,"mul","","",0,null],[11,"mul","","",1,null],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[6,"RGB8","","8-bit RGB. The colorspace is techincally undefined, but generally sRGB is assumed.",null,null],[6,"RGB16","","16-bit RGB in machine&#39;s native endian. Be careful to perform byte-swapping when reading from files.",null,null],[6,"RGBA8","","Alpha is last. The crate doesn&#39;t impose which value represents transparency, but usually it&#39;s 0 = transparent, 255 = opaque.",null,null],[6,"RGBA16","","",null,null],[8,"ComponentBytes","","Casting the struct to slices/bytes of its components",null,null],[10,"as_slice","","The components interpreted as an array, e.g. RGB gives 3-element slice. The red component is first.",2,null],[10,"as_mut_slice","","",2,null],[11,"as_bytes","","The components interpreted as raw bytes, in machine&#39;s native endian. Bytes of the red component are first.",2,null],[8,"ComponentMap","","Applying operation to every component",null,null],[10,"map","","Convenience function (equivalent of `self.iter().map().collect()`) for applying same formula to every component",3,null],[11,"as_bytes","","The components interpreted as raw bytes, in machine&#39;s native endian. Bytes of the red component are first.",2,null]],"paths":[[3,"RGB"],[3,"RGBA"],[8,"ComponentBytes"],[8,"ComponentMap"]]};
initSearch(searchIndex);
